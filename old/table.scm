(define (make-table same-key?)
  (let ((table (list '*table*)))
    (define (n-lookup keys t)
      (let ((key (car keys)))
        (let ((record (assoc key (cdr t))))
          (cond ((null? (cdr keys)) (cdr record))
                (record (n-lookup (cdr keys) (cdr record)))
                (else false)))))
    (define (lookup keys)
      (n-lookup keys table))
    (define (n-insert! keys value t)
      (let ((key (car keys)))
        (let ((record (assoc key (cdr t))))
          (cond ((and (null? (cdr keys)) record)
                 (set-cdr! record value))
                ((not (null? (cdr keys)))
                 (let ((new-table ((make-table same-key?) 'table)))
                  (set-cdr! t (cons (cons key new-table) (cdr t)))
                  (n-insert! (cdr keys) value new-table)))
                (record (n-insert! (cdr keys) value record))
                (else (set-cdr! t (cons (cons key value) (cdr t)))))))
      'ok)
    (define (insert! keys value)
      (n-insert! keys value table))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (dispatch m)
      (cond ((eq? m 'insert!) insert!)
            ((eq? m 'lookup) lookup)
            ((eq? m 'table) table)))
    dispatch))

(define test-table (make-table equal?))
(define insert! (test-table 'insert!))
(define lookup (test-table 'lookup))

(insert! '(zach geis) 'test)
(insert! '(theresa) 'geis)
(insert! '(copper) 'man)

(test-table 'table)

(lookup '(copper))
(lookup '(zach geis))
